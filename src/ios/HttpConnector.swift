/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
*/

import Foundation

open class HttpConnector: CDVPlugin
{

    // Variable that will hold a ssdp server delegate
    fileprivate var delegate:HttpConnectorDelegate?

    /// Constructor that will receive the delegate to answer later
    /// - parameters:
    ///     - delegate: delegate reference in order to threat the events generated by this connector
    init(_ delegate: HttpConnectorDelegate?)
    {
        self.delegate = delegate
        // Max wait time for HTTP response
        URLSession.shared.configuration.timeoutIntervalForResource = 10
    }

    /// Function responsible for sending a http request async
    open func sendRequestFor(_ ipAddress: String, _ port: String,  _ extendedUrl: String, _ expectedTarget: String, _ command: CDVInvokedUrlCommand)
    {

      URLSession.shared.dataTask(with: URL(string: "http://" + ipAddress + ":" + port + extendedUrl)!)
      {
          data, response, error in
          // informe result
          var isAddress: Bool = false
          if error == nil
          {
            // HTTP Response headers
            let httpResponse = response as! HTTPURLResponse
            let server: String = (httpResponse.allHeaderFields["Server"] as? String)!
            if server == expectedTarget {
                isAddress = true
            }
          }
          if self.delegate != nil
          {
            self.delegate?.httpConnector(self, ipAddress, isAddress, command)
          }
      }.resume()
    }
}
